{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p> ALL-INCLUSIVE PYTHON PROJECTS </p>"},{"location":"#introduction","title":"Introduction","text":"<p>Pyprojectx makes it easy to create all-inclusive Python projects; no need to install any tools upfront, not even Pyprojectx itself!</p>"},{"location":"#feature-highlights","title":"Feature highlights","text":"<ul> <li>Reproducible builds by treating tools and utilities as (versioned) dev-dependencies</li> <li>No global installs, everything is stored inside your project directory (like npm's node_modules)</li> <li>Bootstrap your entire build process with a small wrapper script (like Gradle's gradlew wrapper)</li> <li>Configure shortcuts for routine tasks</li> <li>Simple configuration in pyproject.toml</li> </ul> <p>Projects can be build/tested/used immediately without explicit installation nor initialization:</p> Linux/MacWindows <pre><code>git clone https://github.com/pyprojectx/px-demo.git\ncd px-demo\n./pw build\n</code></pre> <pre><code>git clone https://github.com/pyprojectx/px-demo.git\ncd px-demo\n.\\pw build\n</code></pre> <p></p>"},{"location":"#installation","title":"Installation","text":"<p>One of the key features is that there is no need to install anything explicitly (except a Python 3.7+ interpreter).</p> <p><code>cd</code> into your project directory and download the wrapper scripts:</p> Linux/MacWindows <pre><code>curl -LO https://github.com/pyprojectx/pyprojectx/releases/latest/download/wrappers.zip &amp;&amp; unzip -o wrappers.zip &amp;&amp; rm -f wrappers.zip\n</code></pre> <pre><code>Invoke-WebRequest https://github.com/pyprojectx/pyprojectx/releases/latest/download/wrappers.zip -OutFile wrappers.zip; Expand-Archive -Force -Path wrappers.zip -DestinationPath .; Remove-Item -Path wrappers.zip\n</code></pre> <p>With the wrapper scripts in place, you can generate example configuration (see Initialize a new or existing project):</p> Linux/MacWindows <pre><code># initialize a plain Python project\n./pw --init project\n# initialize a project with poetry's init command\n./pw --init poetry\n# initialize a project with pdm's init command\n./pw --init pdm\n</code></pre> <pre><code># initialize a plain Python project\n.\\pw --init project\n# initialize a project with poetry's init command\n.\\pw --init poetry\n# initialize a project with pdm's init command\n.\\pw --init pdm\n</code></pre> <p>Tip: Add the wrapper scripts to version control</p> <p>When using Git: <pre><code>git add pw pw.bat\ngit update-index --chmod=+x pw\necho .pyprojectx/ &gt;&gt; .gitignore\n</code></pre></p> <p>Tip: Install the <code>px</code> utility script</p> <p>You can copy a small script to <code>.pyprojectx</code> in your home directory. When added to your PATH, you can replace <code>./pw</code> with the shorter <code>px</code>. This also works from subdirectories: <code>../../pw</code> can also be replaced with <code>px</code></p> Linux/MacWindows <pre><code>./pw --init global\n</code></pre> <pre><code>.\\pw --init global\n</code></pre>"},{"location":"dev-dependencies/","title":"A Note about Dev-Dependencies","text":"<p>Poetry and PDM let you define dev-dependencies similar to npm's devDependencies. There is however a major difference between Python and npm dependencies: npm can install multiple versions of the same package, meaning that devDependencies do not interfere with main dependencies. Python, on the other hand, can only install one version of a package. This means that all dependencies will have to meet both the main dependency constraints and all the dev-dependency constraints.</p> <p>If you install all your development tools as dev-dependencies, some packages that your production code depends on, will likely be downgraded to older versions. Or worse: your project fails to install because of dependency conflicts.</p> <p>Tip: Only install test packages as dev-dependencies</p> <p>pytest and friends need to be installed together with your code, so you will need to add them as Poetry or PDM dev-dependencies. Other tools and utilities can be managed by Pyprojectx in order to get reproducible builds.</p>"},{"location":"recipes/","title":"Recipes","text":""},{"location":"recipes/#build-scripts","title":"Build scripts","text":"<p>Script your development and build flow with aliases:</p> <ul> <li>use pre-commit hooks</li> <li>configure code formatting and linting</li> <li>package and publish to pypi</li> <li>...</li> </ul> <p>Use Poetry or PDM to further streamline your development flow with:</p> <ul> <li>better dependency management and version locking compared with pip requirement files</li> <li>virtual environment management (or skip a virtual environment all together when using PDM)</li> <li>packaging and publishing</li> </ul> <p>With this combination, you can most likely skip makefiles altogether.</p> <p>Example: <pre><code>[tool.pyprojectx]\n# the first time that a poetry command is invoked, we make sure that pre-commit hooks are installed, so we can't forget it\npoetry = { requirements = \"poetry==1.1.13\", post-install = \"pw@pre-commit install\" }\nblack = \"black==22.1.0\"\nruff = \"ruff==0.0.291\"\npre-commit = \"pre-commit\"\nmkdocs = [\"mkdocs ~=1.2\", \"mkdocs-material ~=8.2\", \"mkdocstrings[python] ~=0.18\", \"markdown-include ~=0.6\", ]\n\n[tool.pyprojectx.aliases]\ninstall = \"poetry install\"\nrun = \"poetry run pyprojectx -t pyproject.toml \"\noutdated = \"poetry show --outdated\"\nclean = \"rm -r .venv .pytest_cache dist\"\nblack = \"black src tests\"\nruff = \"ruff src tests --fix\"\nunit-test = \"poetry run pytest tests/unit\"\nintegration-test = \"poetry run pytest tests/integration\"\ntest = \"pw@unit-test &amp;&amp; pw@integration-test\"\ncheck-ruff = \"ruff src tests\"\ncheck-black = \"black src tests --check\"\n# run check before pushing to git and your build will never break\ncheck = \"pw@check-black &amp;&amp; pw@check-ruff &amp;&amp; pw@test\"\n# run the same build command on your laptop or CI/CD server\nbuild = \"pw@install &amp;&amp; pw@check &amp;&amp; pw@poetry build\"\n\n# extract complexity from your CI/CD flows to test/run locally\npublish = \"poetry publish --username __token__\"\nprep-release = \"\"\"\\\n# create distributions, tag versions, etc.\n\"\"\"\n\n# generate documentation\ngenerate-usage = \"pw@ --help &gt; docs/docs/usage.txt\"\nserve-docs = \"@mkdocs: cd docs &amp;&amp; mkdocs serve\"\ndeploy-docs = \"@mkdocs: cd docs &amp;&amp; mkdocs gh-deploy\"\n</code></pre></p> <p>See Pyprojectx own pyproject.toml for a full example with PDM, or px-demo for another example project with PDM.</p>"},{"location":"recipes/#github-actions","title":"Github actions","text":"<p>By using the <code>pw</code> wrapper script, you can simplify your github actions:</p> <ul> <li>no explicitly tool installations or docker images (for Python tools)</li> <li>use the same commands and scripts in github actions as on your laptop</li> </ul> <p>Some tips:</p> <ul> <li>Use the same scripts on Linux and Windows by replacing <code>./pw</code> (resp. <code>.\\pw</code>) with <code>python pw</code></li> <li>Speed up builds by caching <code>.pyprojectx</code></li> </ul> <p>Example: <pre><code>jobs:\n  build:\n    steps:\n      - name: Cache .pyprojectx\n        uses: actions/cache@v2\n        env:\n          cache-name: .pyprojectx\n        with:\n          path: .pyprojectx\n          key: ${{ runner.os }}-pyprojectx\n\n      - name: Set up Python ${{ matrix.python-version }} on ${{ matrix.os }}\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Test and build\n        run: python pw build\n</code></pre> See Pyprojectx own build and release workflows for a full example.</p>"},{"location":"recipes/#experiment-with-your-project-in-a-jupyter-notebook","title":"Experiment with your project in a Jupyter notebook","text":"<p>You can launch a notebook that has access to your project packages without the need to install anything upfront.</p> <p><pre><code>[tool.pyprojectx]\n# install the current directory together with jupyter\njupyter = [\"jupyter\", \".\"]\n\n[tool.pyprojectx.aliases]\n# the notebook-dir is optional\n# -y is there to automatically answer 'yes' after quitting with ctrl+c\nnotebook = \"jupyter notebook --notebook-dir docs -y\"\n</code></pre> Just run <code>px notebook</code> or even <code>px n</code></p>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#cli","title":"CLI","text":"<pre><code>usage: pyprojectx [-h] [--version] [--toml TOML] [--install-dir INSTALL_DIR]\n                  [--force-install] [--verbose] [--quiet] [--info] [--init]\n                  [--upgrade]\n                  ...\n\nExecute commands or aliases defined in the [tool.pyprojectx] section of\npyproject.toml. Use the -i or --info option to see available tools and\naliases.\n\npositional arguments:\n  command               The command/alias with optional arguments to execute.\n\noptions:\n  -h, --help            show this help message and exit\n  --version             show program's version number and exit\n  --toml TOML, -t TOML  The toml config file. Defaults to 'pyproject.toml' in\n                        the same directory as the pw script.\n  --install-dir INSTALL_DIR\n                        The directory where all tools (including pyprojectx)\n                        are installed; defaults to the PYPROJECTX_INSTALL_DIR\n                        environment value if set, else '.pyprojectx' in the\n                        same directory as the invoked pw script\n  --force-install, -f   Force clean installation of the virtual environment\n                        used to run cmd, if any\n  --verbose, -v         Give more output. This option is additive and can be\n                        used up to 2 times.\n  --quiet, -q           Suppress output\n  --info, -i            Show the configuration details of a command in stead\n                        of running it. If the command is not configured as\n                        tool or alias, a list with all available tools and\n                        aliases is shown.\n  --init                Create or prepare a pyproject.toml and pyprojectx\n                        wrapper scripts. Run with '--init help' to show\n                        available init options\n  --upgrade             Download the latest pyprojectx wrapper scripts.\n</code></pre>"},{"location":"usage/#initialize-a-new-or-existing-project","title":"Initialize a new or existing project","text":"<p>Pyprojectx can create or update a <code>pyproject.toml</code> file for either a plain, a PDM or a Poetry project.</p> <p>Cd into your existing project directory (or create a new empty directory), download the wrapper scripts, and run the init command.</p> <p>Tip: Add the wrapper scripts to version control</p> <p>When using Git: <pre><code>git add pw pw.bat\ngit update-index --chmod=+x pw\necho .pyprojectx/ &gt;&gt; .gitignore\n</code></pre></p>"},{"location":"usage/#plain-python-project","title":"Plain Python project","text":"Linux/MacWindows <pre><code>curl -LO https://github.com/pyprojectx/pyprojectx/releases/latest/download/wrappers.zip &amp;&amp; unzip wrappers.zip &amp;&amp; rm -f wrappers.zip\n./pw --init project\n</code></pre> <pre><code>Invoke-WebRequest https://github.com/pyprojectx/pyprojectx/releases/latest/download/wrappers.zip -OutFile wrappers.zip; Expand-Archive -Path wrappers.zip -DestinationPath .; Remove-Item -Path wrappers.zip\n.\\pw --init project\n</code></pre> <p>Now you can use the <code>pw</code> or <code>px</code> script to show available tools and commands: <code>./pw -i</code>.</p>"},{"location":"usage/#pdm-project","title":"PDM project","text":"<p>Start the interactive PDM initializer:</p> Linux/MacWindows <pre><code>curl -LO https://github.com/pyprojectx/pyprojectx/releases/latest/download/wrappers.zip &amp;&amp; unzip wrappers.zip &amp;&amp; rm -f wrappers.zip\n./pw --init pdm\n</code></pre> <pre><code>Invoke-WebRequest https://github.com/pyprojectx/pyprojectx/releases/latest/download/wrappers.zip -OutFile wrappers.zip; Expand-Archive -Path wrappers.zip -DestinationPath .; Remove-Item -Path wrappers.zip\n.\\pw --init pdm\n</code></pre> <p>Any extra arguments are passed to PDM's init command, f.e. <code>./pw --init pdm --non-interactive</code>.</p> <p>Now you can run any PDM command with the <code>pw</code> or <code>px</code> script, f.e. <code>./pw pdm install</code></p>"},{"location":"usage/#poetry-project","title":"Poetry project","text":"<p>Start the interactive poetry initializer:</p> Linux/MacWindows <pre><code>curl -LO https://github.com/pyprojectx/pyprojectx/releases/latest/download/wrappers.zip &amp;&amp; unzip wrappers.zip &amp;&amp; rm -f wrappers.zip\n./pw --init poetry\n</code></pre> <pre><code>Invoke-WebRequest https://github.com/pyprojectx/pyprojectx/releases/latest/download/wrappers.zip -OutFile wrappers.zip; Expand-Archive -Path wrappers.zip -DestinationPath .; Remove-Item -Path wrappers.zip\n.\\pw --init poetry\n</code></pre> <p>Any extra arguments are passed to Poetry's init command, f.e. <code>./pw --init poetry --no-interaction</code>.</p> <p>Now you can run any Poetry command with the <code>pw</code> or <code>px</code> script, f.e. <code>./pw poetry install</code></p> <p>In-project virtual environment</p> <p><code>--init poetry</code> will also copy a <code>poetry.toml</code> to your project directory: <pre><code>[virtualenvs]\nin-project = true\n</code></pre> This makes Poetry create a <code>.venv</code> in your project directory instead of somewhere in your home directory. It makes it easier to locate files and to keep your system clean when removing the project.</p>"},{"location":"usage/#install-the-global-px-script","title":"Install the global <code>px</code> script","text":"<p>Pyprojectx provides a small <code>px</code> script that delegates everything to the <code>pw</code> wrapper script. The <code>pw</code> script is searched for in the current working directory and its parents.</p> <p>When added to your PATH, you can replace <code>./pw</code> with the shorter <code>px</code>. This also works from subdirectories: <code>../../pw</code> can also be replaced with <code>px</code></p> <p>To install:</p> Linux/MacWindows <pre><code>./pw --init global\n</code></pre> <pre><code>.\\pw --init global\n</code></pre>"},{"location":"usage/#global-tools","title":"Global tools","text":"<p>Besides the <code>px</code> script, <code>pw --init global</code> also copies other files:</p> <ul> <li><code>pxg</code> script in <code>~/.pyprojectx</code></li> <li><code>pw</code> script and example <code>pyproject.toml</code> in <code>~/.pyprojectx/global</code></li> </ul> <p><code>pxg</code> can be used as a lightweight pipx to install tools globally.</p> <p>Example usage: <code>pyproject.toml</code> contains by default httpie so you can make http requests: <pre><code>pxg http POST pie.dev/post hello=world\n</code></pre></p> <p>Uninstalling all global tools is just a matter of <code>rm -rf ~/.pyprojectx/global/.pyprojectx</code></p>"},{"location":"config/aliases/","title":"Shortcut common commands with aliases","text":"<p>Aliases allow you to define shortcuts for common commands and simple shell scripts.</p> <p>Tools that expose multiple scripts, also require aliases to make all scripts available via the <code>pw</code> wrapper script.</p> <p><code>px</code> or <code>pw</code>?</p> <p>This section assumes that you installed the px utility script. Otherwise, you need to replace <code>px</code> with <code>./pw</code> (Linux, Mac) or <code>.\\pw</code> (Windows PowerShell).</p>"},{"location":"config/aliases/#defining-shortcuts","title":"Defining shortcuts","text":"<p>You can avoid a lot of typing by aliasing commands that you use a lot. Example: <pre><code>[tool.pyprojectx.aliases]\ninstall = \"poetry install\"\nrun = \"poetry run\"\n</code></pre></p> <p>With above aliases, you can type <code>px install</code> instead of the usual <code>poetry install</code>. Depending on your other aliases, this can be even shortened to <code>px i</code> (see alias abbreviations).</p> <p>All arguments are passed to the underlying command or script, making <code>px run my-script --foo</code> equivalent to <code>poetry run my-script --foo</code>.</p>"},{"location":"config/aliases/#shell-scripts","title":"Shell scripts","text":"<p>Shell scripts can also be aliased: <pre><code>[tool.pyprojectx.aliases]\nprepare = \"mkdir build &amp;&amp; mkdir generated\"\nclean = \"rm -rf build generated\"\n</code></pre></p> <p>You can override aliases for a specific OS: <pre><code>[tool.pyprojectx.os.win.aliases]\nclean = \"rd /s /q build generated\"\n</code></pre></p> <p>Above <code>clean</code> alias will override the default one on Windows (in fact on all operating systems where <code>sys.platform.startswith(\"win\")==True</code>).</p> <p>Aliases are interpreted by the OS shell</p> <p>The alias <code>show-path = \"echo %PATH%\"</code> will print the PATH environment variable on Windows, but will print literally <code>%PATH%</code> on another OS.</p>"},{"location":"config/aliases/#combining-aliases","title":"Combining aliases","text":"<p>Use the <code>pw@</code> prefix to call alias from another alias.</p> <pre><code>[tool.pyprojectx.aliases]\nunit-test = \"pdm run pytest tests/unit\"\nintegration-test = \"pdm run pytest tests/integration\"\ntest = \"pw@unit-test &amp;&amp; pw@integration-test\"\n# a list of commands behaves the same as when combined with '&amp;&amp;'\nbuild = [\n    \"pw@install\",\n    \"pw@test\",\n    \"pw@pdm build\",\n]\n</code></pre> <p><code>pw@</code> is substituted with the initial wrapper command + arguments.</p> <p>So running <code>px -v test</code> will expand to <pre><code>px -v poetry run pytest tests/unit &amp;&amp; px -v  poetry run pytest tests/integration\n</code></pre></p>"},{"location":"config/aliases/#tools-and-packages-with-multiple-scripts","title":"Tools and packages with multiple scripts","text":"<p>When installing multiple tools/packages together, or when using a tool that installs multiple scripts, you can define aliases to expose additional scripts besides the main script.</p> <p>By starting an alias with <code>@tool-name:</code>, where tool-name is the key of a <code>[tool.pyprojectx]</code> entry, the alias always runs in the context of the virtual environment that is created for <code>tool-name</code>.</p> <pre><code>[tool.pyprojectx]\n# available scripts: flake8, pyflakes, black, ...\nflake8 = [\"flake8 ~=4.0\", \"flake8-black ~=0.3\"]\n\n[tool.pyprojectx.aliases]\n# expose black that is installed together with flake8-black\nblack = \"@flake8: black\"\n</code></pre> <p>Now you can run <code>black</code> as usual: <pre><code>px black --version\n# black, 22.1.0 (compiled: yes)\n</code></pre></p>"},{"location":"config/aliases/#abbreviations","title":"Abbreviations","text":"<p>To run an alias, you only have to type the portion of the alias name that uniquely identifies the alias within the project. So we don't have to type the complete name if we can use a shorter version. As a bonus Pyprojectx also supports camel case to abbreviate an alias name.</p> <p>When you define an alias named either <code>foo-bar</code> or <code>fooBar</code>, then following commands are equivalent (provided they don't match any other alias): <pre><code>px foo-bar\npx fooBar\npx fooB\npx fBar\npx fB\npx f\n</code></pre></p> <p>An alias can shadow other commands</p> <p>Abbreviations come with the cost that an alias will shadow other non-alias commands when the alias' name starts with that command. For example: <pre><code>[tool.pyprojectx]\nblack = \"black\"\n[tool.pyprojectx.aliases]\nblack-adder = \"echo 'Field Marshal Haig is about to make yet another gargantuan effort to move his drinks cabinet six inches closer to Berlin.'\"\nblack = \"@black: black\"\n</code></pre> Here it would not be possible to use the <code>black</code> formatter without explicitly exposing it with the second alias.</p> <p>Tip: Abbreviations as cli hints</p> <p>When you don't remember the exact alias to run, just type the first letter(s) and <code>px</code> will refresh your memory \ud83d\ude01 <pre><code>px c\n# 'c' is ambiguous\n# Candidates are:\n# clean, clean-all, check\n</code></pre> Or run <code>px -i</code> to list all available aliases and tools.</p>"},{"location":"config/tools/","title":"Manage Tools as Dev dependencies","text":"<p>Pyprojectx can manage all the Python tools and utilities that you use for building, testing...</p> <p>Adding a tool to the <code>[tool.pyprojectx]</code> section in <code>pyproject.toml</code> makes it available inside your project.</p> <p><code>px</code> or <code>pw</code>?</p> <p>This section assumes that you installed the px utility script. Otherwise, you need to replace <code>px</code> with <code>./pw</code> (Linux, Mac) or <code>.\\pw</code> (Windows PowerShell).</p>"},{"location":"config/tools/#tool-configuration","title":"Tool configuration","text":"<p>Pyprojectx creates an isolated virtual environment for each configured tool (or set of tools).</p> <p>Inside the <code>[tool.pyprojectx]</code> section of <code>pyproject.toml</code> you specify what needs to be installed.</p> pyproject.toml<pre><code>[tool.pyprojectx]\n# require a specific poetry version\npoetry = \"poetry==1.1.11\"\n# install the latest version of the black formatter\nblack = \"black\"\n</code></pre> <p>Above configuration makes the <code>black</code> and <code>poetry</code> commands available inside your project.</p> <p>You only need to prefix them with the<code>px</code> or <code>pw</code> wrapper script:</p> Any OS with <code>px</code>Linux/MacWindows <pre><code>px poetry --help\npx black my_package --diff\n</code></pre> <pre><code>./pw poetry --help\n./pw black my_package --diff\n</code></pre> <pre><code>.\\pw poetry --help\n.\\pw black my_package --diff\n</code></pre>"},{"location":"config/tools/#specifying-requirements","title":"Specifying requirements","text":"<p>The entries in the <code>[tool.pyprojectx]</code> section take the form <code>tool = requirements</code></p> <ul> <li>tool: The main command or script that comes with the tool. If the tool comes with additional commands that you want   to use, you need to expose these via Pyprojectx aliases.</li> <li>requirements: A multiline string or array of strings that adheres to   pip's Requirements File Format</li> </ul> <p>Example:</p> pyproject.toml<pre><code>[tool.pyprojectx]\n# expose httpie's http script\nhttp = \"httpie ~= 3.0\"\n\nflake8 = \"\"\"\n  flake8 &gt;3\n  flake8-bugbear &gt;=20\n\"\"\"\n\nblack8 = [\"flake8 ~=4.0\", \"flake8-black ~=0.3\"]\n\n[tool.pyprojectx.aliases]\nrun-flake8-with-black = \"@black8: flake8\"\n</code></pre> <p>With above configuration, you can run following commands:</p> <pre><code>px http www.google.com\n# HTTP/1.1 200 OK ...\n\npx flake8 --version\n# 4.0.1 (flake8-bugbear: 22.1.11, mccabe: 0.6.1, pycodestyle: 2.8.0, pyflakes: 2.4.0) CPython 3.9.6 on Darwin\n\npx run-flake8-with-black --version\n# 4.0.1 (black: 0.3.2, mccabe: 0.6.1, pycodestyle: 2.8.0, pyflakes: 2.4.0) CPython 3.9.6 on Darwin\n</code></pre> <p>Tip: Specify exact versions for tools that are critical in your build flow</p> <p>This makes sure that your build won't break when new versions of a tool are released. It also ensures that you can always rebuild older versions of your project that rely on older versions of tools (f.e. when building a patch release).</p>"},{"location":"config/tools/#using-an-alternative-package-index","title":"Using an alternative package index","text":"<p>You can use pip's <code>--index-url</code> or <code>--extra-index-url</code> to install packages from alternative (private) package indexes:</p> <pre><code>[tool.pyprojectx]\nmy-private-tool = [\n    \"--extra-index-url https://artifactory.acme.com/artifactory/api/pypi/python-virtual/simple\",\n    \"some-private-package\"\n]\n</code></pre>"},{"location":"config/tools/#post-install-scripts","title":"Post-install scripts","text":"<p>In some situations it can be useful to perform additional actions after a tool has been installed. This is achieved by configuring both requirements and post-install scripts for a tool: <pre><code>[tool.pyprojectx]\n[tool.pyprojectx.jupyter]\nrequirements = [\"jupyter\",  \"jupyter_contrib_nbextensions\"]\npost-install=\"\"\"\\\njupyter contrib nbextension install --sys-prefix\njupyter nbextension enable autoscroll/main --sys-prefix\njupyter nbextension enable scroll_down/main --sys-prefix\"\"\"\n</code></pre></p> <p>When running <code>px jupyter notebook</code> for the first time in the example above, some Jupyter extensions are installed and enabled.</p> <p>Tip: Use toml subsections for better readability</p> <p>The example above uses a toml subsection instead of an inline table: <pre><code>jupyter = { requirements = [...], post-install=\"...\"}`\n</code></pre></p>"}]}